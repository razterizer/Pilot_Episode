name: build ubuntu

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-program:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # Step 2: Move to the parent directory and fetch dependencies
      - name: Fetch dependencies
        run: |
          cd ..
          mkdir lib
          cd lib
          git clone https://github.com/razterizer/Core.git
          git clone https://github.com/razterizer/Termin8or.git
          git clone https://github.com/razterizer/8Beat.git
          git clone https://github.com/razterizer/AudioLibSwitcher_OpenAL.git --recurse-submodules
          git clone https://github.com/razterizer/TrainOfThought.git

      # Step 3: Install OpenAL
      - name: Install OpenAL
        run: sudo apt install libopenal-dev
      
      # Step 4: Change to the correct directory and build
      - name: Build project
        run: |
          cd Pilot_Episode
          ./build.sh
        continue-on-error: false # Ensure errors are not bypassed
  
      # Step 5: Run program
      - name: Run program
        if: false
        run: |
             cd Pilot_Episode
             ./bin/pilot_episode
             
      # Step 6: Install cloc
      - name: Install cloc
        run: sudo apt-get install -y cloc
      
      # Step 7: Count C++ LOC and generate badge as SVG
      - name: Count C++ LOC and generate badge
        run: |
          mkdir -p badges
          CLOC_RESULT=$(cloc --include-ext=cpp,h --json . | jq '.SUM.code')
          echo "$CLOC_RESULT"

          if [ "$CLOC_RESULT" -lt 10000 ]; then
            HUMAN_READABLE=$(printf "%'d" "$CLOC_RESULT" | sed 's/,/ /g')
          else
            HUMAN_READABLE=$(awk "BEGIN { printf \"%.1f k\", $CLOC_RESULT / 1000 }")
          fi

          # Estimate value text width (7px per character as an approximation)
          VALUE_TEXT_WIDTH=$(( ${#HUMAN_READABLE} * 7 + 10 ))  # +10 for padding
          LEFT_RECT_WIDTH=70
          TOTAL_WIDTH=$((LEFT_RECT_WIDTH + VALUE_TEXT_WIDTH))
          TEXT_X=$((LEFT_RECT_WIDTH + VALUE_TEXT_WIDTH / 2))

          # Create SVG badge
          cat <<EOF > badges/loc-badge.svg
          <svg xmlns="http://www.w3.org/2000/svg" width="$TOTAL_WIDTH" height="20" role="img" aria-label="C++ lines: $HUMAN_READABLE">
            <title>C++ lines: $HUMAN_READABLE</title>
            <rect width="$LEFT_RECT_WIDTH" height="20" fill="#555"/>
            <rect x="$LEFT_RECT_WIDTH" width="$VALUE_TEXT_WIDTH" height="20" fill="#007ec6"/>
            <text x="$((LEFT_RECT_WIDTH / 2))" y="14" fill="#fff" font-family="Verdana" font-size="11" text-anchor="middle">C++ lines</text>
            <text x="$TEXT_X" y="14" fill="#fff" font-family="Verdana" font-size="11" text-anchor="middle">$HUMAN_READABLE</text>
          </svg>
          EOF

      # Step 8: Commit and push the badge to the "badges" branch
      - name: Commit and push badge to badges branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Fetch the latest badges branch
          git fetch origin badges || true
          git checkout badges || git checkout --orphan badges

          # Merge remote changes if the branch already exists
          git pull origin badges --rebase || true

          # Copy badge to the branch and commit
          cp -r badges/* .
          git add loc-badge.svg
          git commit -m "Update LOC badge" || echo "No changes to commit"

          # Push the updated branch
          git push origin badges --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  build-program-with-locked-dependencies:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # Step 2: Move to the parent directory and fetch dependencies
      - name: Fetch dependencies
        run: |
          cd ..
          ./Pilot_Episode/fetch-dependencies.py Pilot_Episode/dependencies -y

      # Step 3: Install OpenAL
      - name: Install OpenAL
        run: sudo apt install libopenal-dev
      
      # Step 4: Change to the correct directory and build
      - name: Build project
        run: |
          cd Pilot_Episode
          ./build.sh
        continue-on-error: false # Ensure errors are not bypassed
